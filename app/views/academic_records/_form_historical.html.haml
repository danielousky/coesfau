%h5.bg-info.p-1.text-center.mb-0 Agregar Nuevo Registro
.border.p-3.mb-3
  .row.text-center.fw-bold
    .col-3{'data-bs-toggle': :tooltip, title: 'Descripción de la asigntura'} Asignatura
    .col-4{'data-bs-toggle': :tooltip, title: 'Identificación y tipo de la Sección'} Sección
    .col-2{'data-bs-toggle': :tooltip, title: 'Estado de calificación'} Estado
    .col-2{'data-bs-toggle': :tooltip, title: 'Valor de calificación'} Calificación
    .col-1
  = form_tag "/academic_records" do
    = hidden_field_tag 'academic_record[enroll_academic_process_id]', enroll.id
    .row
      .col-3
        =# SUBJECTS
        %select#subject_id{"data-filteringselect": true, "data-options": "{\"xhr\":true,\"remote_source\":\"/admin/subject?associated_collection=subject\\u0026compact=true\\u0026current_action=create\\u0026source_abstract_model=course\"}", name: "course[subject_id]", placeholder: "Escriba Código Asignatura", style: "display: none;", onchange: "getSections(this);"}
          %option{label: " ", value: ""}
          %option{value: ""}

      .col-4
        #divSectionCode.d-none
          .row
            .col-5
              =# EXISTENTS SECTIONS CODES 
              .input-group.text-center
                =# select_tag :section_code, options_for_select(Section.codes), {class: "form-control", id: 'sections'} 
                = select_tag :section_code, nil, {class: "form-control withSections", id: 'sections'} 
                = link_to 'javascript:void(0)', id: 'addCodeBtn', class: 'input-group-text btn btn-success withSections', 'data-bs-toggle': :tooltip, title: 'Agregar Nuevo Código de la Sección', onclick: "toggleSectionCodes(false);" do
                  %i.fa-regular.fa-plus

              =# NEW SECTION CODE 
              #newSection
                .input-group.text-center
                  = text_field_tag :section_code, {}, {placeholder: 'Código', class: "form-control newSection", oninput: "notSpecialChars(this)", maxlength: 3, id: :inputCode}        
                  = link_to 'javascript:void(0)', id: 'restoreSections', class: 'input-group-text btn btn-success d-none newSection', 'data-bs-toggle': :tooltip, title: 'Códigos existentes', onclick: "toggleSectionCodes(true);" do
                    %i.fa-regular.fa-rotate
        
            .col-6
              =# SECTION TYPE
              - options = Section.modalities.keys.join(".").titleize.split(".")
              = select_tag 'section_type', options_for_select(options), {class: "form-control"}
      .col-2
        -# options = ['Sin Calificar', 'Calificar', 'Pérdida por Inasistencia', 'Retirada']
        =# select_tag 'status', options_for_select(options), {id: :numerica, class: "d-none form-control", onChange: 'showNumericValue(this);'}

        -# options = ['Aplazada', 'Aprobada']
        = select_tag 'academic_record[status]', options_for_select([]), {class: "d-none form-control", onChange: 'showNumericValue(this);'}        
      .col-2
        .row#NumericValue
          =# NUMERICAS
          .col-7.pe-0
            - types_q = GeneralSetup.enabled_post_qualification? ? Qualification.type_qs.keys.join(".").titleize.split(".") : {'Final': :final}
            = select_tag '[qualifications]type_q', options_for_select(types_q), {class: "form-control numericValue d-none"}
          =# QUALIFICATION VALUE
          .col-5.px-0
            = select_tag '[qualifications]value', options_for_select( (1..20).map{|a| sprintf("%02i", a)}), {class: "form-control numericValue d-none", required: true}
      .col-1
        =# GUARDAR
        %button.btn.bt.btn-primary.float-end.d-none{id: 'submitBtn', type: :submit, 'data-bs-toggle': :tooltip, title: 'Guardar'}
          %i.fa-regular.fa-check

:javascript

  function showNumericValue(ele){
    let value = ele.value == 'Calificar';
    let numericValue = $('.numericValue');
    toggleRequireActiveOption(numericValue, !value);
  }

  function notSpecialChars(ele){
    var node = $(ele);
    node.val(node.val().toUpperCase().replace(/[^A-Za-z0-9]/g,''))
  }

  function toggleSectionCodes(enabled){

    let withSections = $('.withSections');
    let newSection = $('.newSection');

    toggleRequireActiveOption(withSections, !enabled);
    toggleRequireActiveOption(newSection, enabled);

  }

  function toggleRequireActiveOption(ele, value) {
    ele.prop('disabled', value);
    ele.prop('readonly', value);
    ele.prop('required', !value);
    ele.toggleClass('d-none', value)
  }

  function getSections(ele){
    let sections = $('#sections');
    let status = $('#academic_record_status');
    let submitBtn = $('#submitBtn');
    let numericValue = $('.numericValue');


    sections.find('option').remove();
    status.find('option').remove();

    toggleRequireActiveOption(submitBtn, true);
    toggleRequireActiveOption(sections, true);
    toggleRequireActiveOption(status, true);
    toggleRequireActiveOption(numericValue, true);

    $('#restoreSections').addClass('d-none')
    $.ajax({
      url: `/subjects/${ele.value}`,
      type: 'GET',
      dataType: 'json',
      beforeSend: function(xhr) {
        xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
      },
      success: function(data) {
  
        let addCodeBtn = $('#addCodeBtn');
        let toAppend = '';
        let inputCode = $('#inputCode');
        let restoreSections = $('#restoreSections');
        let haveSections = data.section_codes.length > 0;

        if (haveSections) {
          $.each(data.section_codes,function(i,o){
            toAppend += '<option>'+o+'</option>';
          });

          sections.find('option').end().append(toAppend);
          toastr.success('Secciones previas encontradas');
        }else{
          toastr.error('Sin secciones previas');
        }
        toggleRequireActiveOption(sections, !haveSections);
        toggleRequireActiveOption(addCodeBtn, !haveSections);
        toggleRequireActiveOption(inputCode, haveSections);

        $('#divSectionCode').removeClass('d-none');
        let optionsStatus;
        if (data.qualification_type == 'absoluta') {
          optionsStatus = '<option>Aprobada</option><option>Aplazada</option>'

        }else{
          optionsStatus = "<option>Sin Calificar</option><option>Calificar</option><option>Pérdida por Inasistencia</option><option>Retirado</option>"
        }
        status.find('option').end().append(optionsStatus);
        toggleRequireActiveOption(status, false);
        toggleRequireActiveOption(submitBtn, false);

      },
      error: function(json) {

        toastr.error('No se pudo cargar las secciones. Inténtelo nuevamente: '+ json.statusText);
      },
      unprocessable_entity: function(json) {
        toastr.error('No procesar la solicitud. Inténtelo nuevamente: '+ json.statusText);

      }
    });
  }


