- enabled_to_admin = (current_user&.admin? and session[:rol].eql? 'admin') ? true : false 
- admin_authorized_to_qualify = enabled_to_admin and (current_user&.admin&.authorized_update? 'Qualification')
- teacher_authorized_to_qualify = current_user&.teacher&.id.eql? section.teacher&.id

- if !enabled_to_admin and teacher_authorized_to_qualify
  %h5.alert.alert-success.text-center Autorizado para Calificar
%table.table.table-condensed.table-striped.table-hover.border.table-bordered.table-sm.table-responsive
  %thead
    %tr.text-center
      %th{style: 'width: 30px'} #
      - if false #(current_user&.admin&.yo?)
        %th AcRe ID
        %th Sec ID
        %th EnrollID
        %th Period
      %th{style: 'width: 80px'} CI
      %th{style: 'width: 100px'} Estado Insc
      %th Estudiante
      
      - if section.subject.numerica?
        - if (admin_authorized_to_qualify or teacher_authorized_to_qualify)
          %th.text-center PI
        %th.text-center Cal. Final
        - if GeneralSetup.enabled_post_qualification?
          %th CD
          %th CR
          %th Cal. Repar
      - else
        %th.text-center Cal. Final
      %th{style: 'width: 150px'} DescripciÃ³n
      %th{style: 'width: 120px'} Estado


  %tbody.align-middle.align-items-center
    - section.academic_records.joins(:user).order('users.last_name ASC, users.first_name ASC').each_with_index do |acre, i|
      - user = acre.user
      - id = acre.id
      - retirado = acre.retirado?
      - preinscrito = acre.preinscrito_in_process?
      - disable_row = (retirado || acre.pi? || preinscrito)
      - status = acre.status
      %tr{id: "acRe#{acre.id}", class: acre.tr_class_by_status_q}
        %td.text-center= i+1
        - if false #current_user&.admin&.yo?
          %td= acre.id
          %td= acre.section.id
          %td= acre.enroll_academic_process_id
          %td= acre.period.name
        %td.text-center= user.ci
        %td.text-center= acre.enroll_academic_process.label_status
        %td{title: user.reverse_name}
          - if enabled_to_admin and current_user&.admin&.authorized_read? 'Student'
            %a{href: "/admin/student/#{acre.student.id}"}= user.reverse_name 
          - else
            = user.reverse_name
        - if retirado
          %td{colspan: 1}
        - else
          - if (admin_authorized_to_qualify or teacher_authorized_to_qualify)
            - @academic_record = acre
            = render partial: '/academic_records/form_qualify', locals: {academic_record: acre, disable_row: disable_row, status: status, id: id, preinscrito: preinscrito}
          - else
            %td= text_field_tag nil, {}, {value: acre.final_q_to_02i_to_from, class: 'form-control form-control-sm', disabled: true}          
        = render partial: '/academic_records/qualification_to_s', locals: {academic_record: acre, id: id}
        %td.text-center
          .badge.bg-info.text-dark{id: "labelStatus#{acre.id}"}= status.titleize

:javascript

  function checkPost(ele) {
    let elem = $(ele);
    let post_elem, final_elem;
    let id = elem.attr('id_obj');
    let val = elem.val();
    let valor_checked = elem.prop('checked');
    let checkboxs = $(`#acRe${id} .checkPost`);

    checkboxs.prop('disabled', valor_checked);
    checkboxs.prop('checked', false);

    elem.prop('disabled', false);
    elem.prop('checked', valor_checked);

    final_elem = $(`#acRe${id} #_qualificationfinal`);
    final_elem.prop('disabled', valor_checked);

    post_elem = $(`#acRe${id} #_qualificationpost`);
    let post_elem_val = post_elem.val();
    let final_elem_val = final_elem.val();
    post_elem.attr('type_q', val);
    if (valor_checked == false && (post_elem_val != '')) {
      post_elem.val(-2);
      sendQualification(post_elem, final_elem_val);
    }
    post_elem.val('');
    post_elem.prop('disabled', !valor_checked);   
  }


  function onlyValidQ(ele){
    var node = $(ele);
    node.val(node.val().replace(/[^0-9]/g,'') );
  }

  function final(ele) {
    elem = $(ele);
    let id = elem.attr('id_obj');
    let checkboxs = $(`#acRe${id} .checkPost`);

    let no_post = (elem.val() == '' || elem.val() > 9 )

    checkboxs.prop('disabled', no_post);
    checkboxs.prop('checked', false);

  }

  function valor_a_letras(value, ar_id) {

    console.log(value);
    let clase = 'table-success'
    if (value == 'aplazado') clase = 'table-danger'

    $(`#acRe${ar_id}`).removeClass().addClass(clase);
    $(`#_${ar_id}qualfication_to_s`).val(value.toUpperCase());
    value = value.replace('a', value.charAt(0).toUpperCase());
    $(`#labelStatus${ar_id}`)[0].innerHTML = value;

  }

  function pi(ele) {
    let id = $(ele).attr('id_obj');
    let status;
    status = 'sin_calificar';
    if (ele.checked) {status = 'perdida_por_inasistencia'}
    let values = `{"academic_record": {"status": "${status}"}}`;
    let url = `/academic_records/${id}`
    sendData('pi', ele, id, url, values);
  }

  function sendAbsolute(ele) {
    let elem = $(ele);
    let id = elem.attr('id_obj');
    let val = elem.val();
    let url = `/academic_records/${id}`
    let values = `{"academic_record": {"status": "${val}"}}`;
    sendData('absolute', val, id, url, values);    
  }

  function sendQualification(ele, val2) {
    let elem = $(ele);
    let id = elem.attr('id_obj');
    let tipo = elem.attr('type_q');
    let val = elem.val();
    val = parseInt(val);
    let url = `/qualifications/${id}`;
    let values = `{"qualification": {"value": ${val}, "type_q": "${tipo}"}}`;
    sendData('qualifiable', val, id, url, values, val2);
  }

  function sendData(tipo, ele, id, url, values, val2){
    var result = false;
    $.ajax({
      url: url,
      type: 'PATCH',
      data: JSON.parse(values),
      dataType: 'json',
      beforeSend: function(xhr) {
        xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
      },
      done: function(json) {
        if (tipo == 'pi') {desactivar_por_pi(ele, id)}
        if (tipo == 'qualifiable') {numero_a_letras(ele, id)}
        if (tipo == 'absolute') {valor_a_letras(ele, id)}
        messageSendData(json.type, json.data);
      },
      success: function(json) {
        if (tipo == 'pi') {desactivar_por_pi(ele, id)}
        if (tipo == 'qualifiable') {numero_a_letras(ele, id)}
        if (tipo == 'absolute') {valor_a_letras(ele, id)}
        if (val2 != undefined) {numero_a_letras(val2, id)}
        messageSendData(json.type, json.data);
      },
      error: function(json) {
        messageSendData(json.type, json.data);
      },
      unprocessable_entity: function(json) {
        messageSendData(json.type, json.data);
      }
    });
  }

  function messageSendData(clase, msg) {
    if (clase == 'danger') toastr.error(msg);
    else toastr.success(msg);
  }

  function desactivar_por_pi(obj, ar_id){
    var inputs, valor_checked;

    inputs = $(`#acRe${ar_id} input`);
    valor_checked = $(obj).prop('checked');
    inputs.val(null);

    let checkboxs = $(`#acRe${ar_id} .checkPost`);

    checkboxs.prop('disabled', valor_checked);
    checkboxs.prop('checked', false)

    inputs.prop('disabled', valor_checked)
    $(obj).prop('disabled', false)
    
    // final.val = (null)
    if (valor_checked === true) {
      numero_a_letras('-1', ar_id);
    }else{
      numero_a_letras(undefined, ar_id);
    }
    
    $(`#_${ar_id}qualfication_to_s`).prop('disabled', true);
    $(`#_${ar_id}qualfication_to_s`).prop('readonly', true);    
  }

  function numero_a_letras(valor, ar_id){
    let final, clase,
    valores = ['CERO', 'UNO', 'DOS', 'TRES', 'CUATRO', 'CINCO', 'SEIS', 'SIETE', 'OCHO', 'NUEVE', 'DIEZ', 'ONCE', 'DOCE', 'TRECE', 'CATORCE', 'QUINCE'] 
    let label = 'Sin Calificar'

    valor = parseInt(valor)
    if (valor == 0){
      final = 'CERO CERO'
      clase = 'table-danger'
    }else if (!valor){
      final = 'SIN CALIFICAR'
      clase = ''
    }else if (valor == -1){
      final = 'PERDIDA POR INASISTENCIA'
      clase = 'table-danger'
      label = 'Perdida Por Inasistencia'
    }else if (valor >= 0 && valor < 10){
      final = `CERO ${valores[valor]}`
      clase = 'table-danger'
      label = 'Aplazado'
    }else if (valor > 9 && valor < 16) {
      final = valores[valor]
      clase = 'table-success'
      label = 'Aprobado'
    }else if (valor > 15 && valor < 20){
      valor = valor % 10
      final = `DIEZ Y ${valores[valor]}`
      clase = 'table-success'
      label = 'Aprobado'
    }else if (valor == 20){
      final = 'VEINTE'
      clase = 'table-success'
      label = 'Aprobado'
    }else{
      final = 'SIN CALIFICAR'
      clase = ''
    }
    $(`#acRe${ar_id}`).removeClass().addClass(clase);
    $(`#_${ar_id}qualfication_to_s`).val(final);
    $(`#labelStatus${ar_id}`)[0].innerHTML = label;

  }

